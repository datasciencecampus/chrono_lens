language: python

matrix:
  include:
    # Use the built in venv for linux builds
    - os: linux
      sudo: required
      python: "3.8.6"
      dist: xenial

install:
  - python3 --version
  - python3 -m pip install -U pip

script:
  # NOTE
  # venv doesn't quite work - neewd to keep "activating" the next venv rather than deactivate first...

  #
  # --------------- localhost tests ---------------
  #
  - echo 'Testing localhost chrono_lens' && echo -en 'travis_fold:start:testing_localhost_chrono_lens\\r'
  - python3 -m venv localhost-venv
  - source localhost-venv/bin/activate

  # command to install dependencies
  - pip install --use-feature=2020-resolver --quiet -r requirements-localhost.txt
  # includes extra 'test' specific dependencies
  - pip3 install --use-feature=2020-resolver --quiet -r tests/requirements.txt
  # for codecov support
  - pip3 install --use-feature=2020-resolver --quiet pytest==4.3.1 pytest-cov==2.9.0
  # to report installed packages
  - pip3 freeze
  # command to run tests
  - PYTHONPATH=. pytest --cov-config .coveragerc --cov=./ tests/
  - echo -en 'travis_fold:end:testing_localhost_chrono_lens\\r'


  #
  # --------------- gcloud chrono_lens tests ---------------
  #
  - echo 'Testing gcloud chrono_lens' && echo -en 'travis_fold:start:testing_gcloud_chrono_lens\\r'

  - python3 -m venv gcloud-venv
  - source gcloud-venv/bin/activate

  - which python3
  - which pip3
  - pip3 -V

  # command to install dependencies
  - pip3 install --use-feature=2020-resolver --quiet -r requirements-gcloud.txt
  # includes extra 'test' specific dependencies
  - pip3 install --use-feature=2020-resolver --quiet -r tests/requirements.txt
  - pip3 install --use-feature=2020-resolver --quiet -r tests/chrono_lens/gcloud/requirements.txt
  # for codecov support
  - pip3 install --use-feature=2020-resolver --quiet pytest==4.3.1 pytest-cov==2.9.0
  # to report installed packages
  - pip3 freeze
  # Pretend we're running on GCP
  - GCP_PROJECT="Travis" BUILD_ID="Travis" PYTHONPATH=. pytest --cov-config .coveragerc --cov=./ tests/
  - echo -en 'travis_fold:end:testing_gcloud_chrono_lens\\r'


  #
  # --------------- gcloud cloud function tests ---------------
  #

  - cd cloud/functions
  - pwd

  # Find all subfolders with src, as these are the folders with GCP function code and create ci/cd triggers
  # Hiding fold keyword in variable to prevent erroneous fold when showing bash code before execution
  - |
    for repo_dir in **/src/
    do
      cd
      FOLD_SPECIAL_WORD="travis_fold"
      FUNCTION_NAME=${repo_dir%/*/} # get only base dir name e.g. distribute_json_sources/src/ -> distribute_json_sources
      echo -en "${FOLD_SPECIAL_WORD}:start:testing_${FUNCTION_NAME}\\\\r"
      echo
      echo "Testing cloud function <${FUNCTION_NAME}> locally"
      python3 -m venv ${FUNCTION_NAME}-venv
      source ${FUNCTION_NAME}-venv/bin/activate
    #      cd ${FUNCTION_NAME}
      cd cloud/functions/${FUNCTION_NAME}
      pwd
      echo "Copying root 'chrono_lens' folder as subdir to 'src' to enable local reuse of shared folder"
      cp -r ../../chrono_lens src/
      pip3 install --use-feature=2020-resolver --quiet pytest==4.3.1 pytest-cov==2.9.0
      pip3 install --use-feature=2020-resolver --quiet -r src/requirements.txt
      if [ -f "tests/requirements.txt" ]; then pip3 install --use-feature=2020-resolver --quiet -r tests/requirements.txt; fi
    #      cd src
      cd
      echo "GCP_PROJECT='Travis' BUILD_ID='Travis' PYTHONPATH=cloud/function/${FUNCTION_NAME}/src pytest --cov-config .coveragerc --cov=cloud/function/${FUNCTION_NAME}/src/ cloud/function/${FUNCTION_NAME}/tests/"
      GCP_PROJECT='Travis' BUILD_ID='Travis' PYTHONPATH=cloud/function/${FUNCTION_NAME}/src pytest cloud/function/${FUNCTION_NAME}/tests/
    #      cd ../..
      echo -en "${FOLD_SPECIAL_WORD}:end:testing_${FUNCTION_NAME}\\\\r"
      echo
    done

after_success:
  #  look for coverage files
  - find . -name \*.xml -print
  - bash <(curl -s https://codecov.io/bash)
